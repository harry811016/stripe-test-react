{"version":3,"sources":["components/ElementDemos.js","useResponsiveFontSize.js","components/demos/CardForm.js","components/demos/SplitForm.js","index.js"],"names":["ElementDemos","demos","location","useLocation","history","useHistory","useState","itent","setItent","className","value","pathname","onChange","event","push","target","map","path","label","key","onClick","fetch","then","response","json","SECRET","console","log","client_secret","to","from","exact","Component","component","CLIENT_SECRET","useResponsiveFontSize","getFontSize","window","innerWidth","fontSize","setFontSize","useEffect","onResize","addEventListener","removeEventListener","CardForm","stripe","useStripe","elements","useElements","options","useMemo","style","base","color","letterSpacing","fontFamily","invalid","useOptions","payment","setPayment","handleSubmit","a","preventDefault","confirmCardPayment","payment_method","type","card","getElement","CardElement","billing_details","address","postal_code","email","name","phone","result","paymentIntent","error","message","status","onSubmit","onReady","onBlur","onFocus","disabled","Object","keys","SplitForm","CardNumberElement","stripePromise","loadStripe","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4839fd55.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Switch,\n  Route,\n  Redirect,\n  useLocation,\n  useHistory,\n} from \"react-router-dom\";\n\nconst ElementDemos = ({ demos }) => {\n  const location = useLocation();\n  const history = useHistory();\n  const [itent, setItent] = useState(\"\");\n\n  const fetchClientSecret = () => {\n    fetch(\"https://node-for-stripe.herokuapp.com/secret\")\n      .then((response) => response.json())\n      .then((SECRET) => {\n        console.log(SECRET);\n        setItent(SECRET.client_secret);\n      });\n  };\n\n  return (\n    <div className=\"DemoWrapper\">\n      <div className=\"DemoPickerWrapper\">\n        <select\n          className=\"DemoPicker\"\n          value={location.pathname}\n          onChange={(event) => {\n            history.push(event.target.value);\n          }}\n        >\n          {demos.map(({ path, label }) => (\n            <option key={path} value={path}>\n              {label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h1>Step 1</h1>\n      <button onClick={fetchClientSecret}>get payment intent</button>\n      <p>CLIENT_SECRET:</p>\n      <p>{itent}</p>\n      <h1>Step 2</h1>\n      <Switch>\n        <Redirect to={demos[0].path} from=\"/\" exact />\n        {demos.map(({ path, component: Component }) => (\n          <Route key={path} path={path}>\n            <div className=\"Demo\">\n              <Component CLIENT_SECRET={itent} />\n            </div>\n          </Route>\n        ))}\n      </Switch>\n    </div>\n  );\n};\n\nexport default ElementDemos;\n","import { useEffect, useState } from \"react\";\n\nexport default function useResponsiveFontSize() {\n  const getFontSize = () => (window.innerWidth < 450 ? \"16px\" : \"18px\");\n  const [fontSize, setFontSize] = useState(getFontSize);\n\n  useEffect(() => {\n    const onResize = () => {\n      setFontSize(getFontSize());\n    };\n\n    window.addEventListener(\"resize\", onResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  });\n\n  return fontSize;\n}\n","import React, { useMemo, useState } from \"react\";\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\n\nimport useResponsiveFontSize from \"../../useResponsiveFontSize\";\n\nconst useOptions = () => {\n  const fontSize = useResponsiveFontSize();\n  const options = useMemo(\n    () => ({\n      style: {\n        base: {\n          fontSize,\n          color: \"#424770\",\n          letterSpacing: \"0.025em\",\n          fontFamily: \"Source Code Pro, monospace\",\n          \"::placeholder\": {\n            color: \"#aab7c4\",\n          },\n        },\n        invalid: {\n          color: \"#9e2146\",\n        },\n      },\n    }),\n    [fontSize]\n  );\n\n  return options;\n};\n\nconst CardForm = (CLIENT_SECRET) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const options = useOptions();\n  const [payment, setPayment] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) return;\n\n    const result = await stripe.confirmCardPayment(\n      CLIENT_SECRET.CLIENT_SECRET,\n      {\n        payment_method: {\n          type: \"card\",\n          card: elements.getElement(CardElement),\n          billing_details: {\n            address: {\n              postal_code: \"94103\",\n            },\n            email: \"test@example.com\",\n            name: \"harry\",\n            phone: \"+15555555555\",\n          },\n        },\n      }\n    );\n    setPayment(result.paymentIntent);\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(\"error\", result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === \"succeeded\") {\n        console.log(\"succeeded\", result);\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Card details\n          <CardElement\n            options={options}\n            onReady={() => {\n              console.log(\"CardElement [ready]\");\n            }}\n            onChange={(event) => {\n              console.log(\"CardElement [change]\", event);\n            }}\n            onBlur={() => {\n              console.log(\"CardElement [blur]\");\n            }}\n            onFocus={() => {\n              console.log(\"CardElement [focus]\");\n            }}\n          />\n        </label>\n        <button type=\"submit\" disabled={!stripe}>\n          Pay\n        </button>\n      </form>\n      <div>\n        <h4>test card info.</h4>\n        <li>Card number: 4242 4242 4242 4242</li>\n        <li>date: any future date</li>\n        <li>CVC: any 3 digits</li>\n        <li>ZIP: 00001</li>\n      </div>\n      <div>\n        <h1>Step 3</h1>\n        <h4>payment result:</h4>\n        {Object.keys(payment).map((key) => {\n          const value = payment[key];\n          return (\n            <p>\n              <strong>{key}</strong>: {value}\n            </p>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default CardForm;\n","import React, { useMemo, useState } from \"react\";\nimport {\n  useStripe,\n  useElements,\n  CardNumberElement,\n  CardCvcElement,\n  CardExpiryElement,\n} from \"@stripe/react-stripe-js\";\n\nimport useResponsiveFontSize from \"../../useResponsiveFontSize\";\n\nconst useOptions = () => {\n  const fontSize = useResponsiveFontSize();\n  const options = useMemo(\n    () => ({\n      style: {\n        base: {\n          fontSize,\n          color: \"#424770\",\n          letterSpacing: \"0.025em\",\n          fontFamily: \"Source Code Pro, monospace\",\n          \"::placeholder\": {\n            color: \"#aab7c4\",\n          },\n        },\n        invalid: {\n          color: \"#9e2146\",\n        },\n      },\n    }),\n    [fontSize]\n  );\n\n  return options;\n};\n\nconst SplitForm = (CLIENT_SECRET) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const options = useOptions();\n  const [payment, setPayment] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n    const result = await stripe.confirmCardPayment(\n      CLIENT_SECRET.CLIENT_SECRET,\n      {\n        payment_method: {\n          type: \"card\",\n          card: elements.getElement(CardNumberElement),\n          billing_details: {\n            address: {\n              postal_code: \"94103\",\n            },\n            email: \"test@example.com\",\n            name: \"harry\",\n            phone: \"+15555555555\",\n          },\n        },\n      }\n    );\n    setPayment(result.paymentIntent);\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(\"error\", result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === \"succeeded\") {\n        console.log(\"succeeded\", result);\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Card number\n          <CardNumberElement\n            options={options}\n            onReady={() => {\n              console.log(\"CardNumberElement [ready]\");\n            }}\n            onChange={(event) => {\n              console.log(\"CardNumberElement [change]\", event);\n            }}\n            onBlur={() => {\n              console.log(\"CardNumberElement [blur]\");\n            }}\n            onFocus={() => {\n              console.log(\"CardNumberElement [focus]\");\n            }}\n          />\n        </label>\n        <label>\n          Expiration date\n          <CardExpiryElement\n            options={options}\n            onReady={() => {\n              console.log(\"CardExpiryElement [ready]\");\n            }}\n            onChange={(event) => {\n              console.log(\"CardExpiryElement [change]\", event);\n            }}\n            onBlur={() => {\n              console.log(\"CardExpiryElement [blur]\");\n            }}\n            onFocus={() => {\n              console.log(\"CardExpiryElement [focus]\");\n            }}\n          />\n        </label>\n        <label>\n          CVC\n          <CardCvcElement\n            options={options}\n            onReady={() => {\n              console.log(\"CardCvcElement [ready]\");\n            }}\n            onChange={(event) => {\n              console.log(\"CardCvcElement [change]\", event);\n            }}\n            onBlur={() => {\n              console.log(\"CardCvcElement [blur]\");\n            }}\n            onFocus={() => {\n              console.log(\"CardCvcElement [focus]\");\n            }}\n          />\n        </label>\n        <button type=\"submit\" disabled={!stripe}>\n          Pay\n        </button>\n      </form>\n      <div>\n        <h4>test card info.</h4>\n        <li>Card number: 4242 4242 4242 4242</li>\n        <li>date: any future date</li>\n        <li>CVC: any 3 digits</li>\n      </div>\n      <h1>Step 3</h1>\n      <h4>payment result:</h4>\n      {Object.keys(payment).map((key) => {\n        const value = payment[key];\n        return (\n          <p>\n            <strong>{key}</strong>: {value}\n          </p>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default SplitForm;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport ElementDemos from \"./components/ElementDemos\";\nimport CardForm from \"./components/demos/CardForm\";\nimport SplitForm from \"./components/demos/SplitForm\";\n\nimport \"./styles.css\";\n\nconst stripePromise = loadStripe(\n  \"pk_test_51Hx6rgJm09sZXIFALmaQ3iRq7bWLvclF97l5F0u7HYziO21ndGIuJHFqnAE4VwRhQRwbE13c0s05id7y1Kvqdj1N00SfVSpCFc\"\n);\n\nconst demos = [\n  {\n    path: \"/card-element\",\n    label: \"CardElement\",\n    component: CardForm,\n  },\n  {\n    path: \"/split-card-elements\",\n    label: \"Split Card Elements\",\n    component: SplitForm,\n  },\n];\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Elements stripe={stripePromise}>\n        <ElementDemos demos={demos} />\n      </Elements>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}